### 1. useState

**What it does**: Manages state in a functional component.

**Analogy**: Imagine a box where you can store a value. You can check what's in the box and update it.

**Example**:
```javascript
import React, { useState } from 'react';

const Counter = () => {
  const [count, setCount] = useState(0); // count is the value in the box, setCount is how we update it

  return (
    <div>
      <p>You clicked {count} times</p>
      <button onClick={() => setCount(count + 1)}>Click me</button>
    </div>
  );
};

export default Counter;
```

### 2. useEffect

**What it does**: Performs side effects in a functional component, like fetching data or updating the DOM.

**Analogy**: Think of it as a reminder to do something after a certain event, like after the component appears on the screen.

**Example**:
```javascript
import React, { useEffect, useState } from 'react';

const Timer = () => {
  const [count, setCount] = useState(0);

  useEffect(() => {
    const timer = setInterval(() => {
      setCount(prevCount => prevCount + 1);
    }, 1000);

    // Cleanup
    return () => clearInterval(timer);
  }, []);

  return <div>Timer: {count}</div>;
};

export default Timer;
```

### 3. useContext

**What it does**: Accesses context values in a functional component.

**Analogy**: Imagine having a shared bulletin board in a room where everyone can read and write messages.

**Example**:
```javascript
import React, { createContext, useContext } from 'react';

const MyContext = createContext();

const Display = () => {
  const value = useContext(MyContext); // Access the shared value
  return <div>Value from context: {value}</div>;
};

const App = () => {
  return (
    <MyContext.Provider value="Hello, World!">
      <Display />
    </MyContext.Provider>
  );
};

export default App;
```

### 4. useReducer

**What it does**: Manages complex state logic using a reducer function.

**Analogy**: Think of it as a way to manage a list of tasks, where you can add, remove, or update tasks based on actions.

**Example**:
```javascript
import React, { useReducer } from 'react';

const reducer = (state, action) => {
  switch (action.type) {
    case 'increment':
      return { count: state.count + 1 };
    case 'decrement':
      return { count: state.count - 1 };
    default:
      throw new Error();
  }
};

const Counter = () => {
  const [state, dispatch] = useReducer(reducer, { count: 0 });

  return (
    <div>
      <p>Count: {state.count}</p>
      <button onClick={() => dispatch({ type: 'increment' })}>+</button>
      <button onClick={() => dispatch({ type: 'decrement' })}>-</button>
    </div>
  );
};

export default Counter;
```

### 5. useCallback

**What it does**: Memoizes a function to avoid recreating it on every render.

**Analogy**: Think of it as writing down a recipe and reusing it without rewriting it every time you cook.

**Example**:
```javascript
import React, { useState, useCallback } from 'react';

const Button = React.memo(({ onClick, children }) => {
  console.log('Button rendered');
  return <button onClick={onClick}>{children}</button>;
});

const App = () => {
  const [count, setCount] = useState(0);

  const handleClick = useCallback(() => {
    setCount(count + 1);
  }, [count]);

  return (
    <div>
      <p>Count: {count}</p>
      <Button onClick={handleClick}>Increment</Button>
    </div>
  );
};

export default App;
```

### 6. useMemo

**What it does**: Memoizes a value to avoid recalculating it on every render.

**Analogy**: Think of it as writing down the result of a long calculation so you donâ€™t have to do it again.

**Example**:
```javascript
import React, { useState, useMemo } from 'react';

const ExpensiveCalculation = ({ number }) => {
  const calculate = (num) => {
    console.log('Calculating...');
    return num * 2;
  };

  const result = useMemo(() => calculate(number), [number]);

  return <div>Result: {result}</div>;
};

const App = () => {
  const [number, setNumber] = useState(2);

  return (
    <div>
      <button onClick={() => setNumber(number + 1)}>Increase Number</button>
      <ExpensiveCalculation number={number} />
    </div>
  );
};

export default App;
```

### 7. useRef

**What it does**: Accesses a mutable reference to a DOM element or any other value.

**Analogy**: Think of it as having a special pointer that always points to the same object.

**Example**:
```javascript
import React, { useRef } from 'react';

const TextInput = () => {
  const inputRef = useRef();

  const focusInput = () => {
    inputRef.current.focus(); // Accesses the input element and sets focus
  };

  return (
    <div>
      <input ref={inputRef} type="text" />
      <button onClick={focusInput}>Focus the input</button>
    </div>
  );
};

export default TextInput;
```

### 8. useImperativeHandle

**What it does**: Customizes the instance value exposed by `ref` to parent components.

**Analogy**: Think of it as defining special controls for a machine that others can use.

**Example**:
```javascript
import React, { useRef, useImperativeHandle, forwardRef } from 'react';

const CustomInput = forwardRef((props, ref) => {
  const inputRef = useRef();

  useImperativeHandle(ref, () => ({
    focus: () => {
      inputRef.current.focus();
    }
  }));

  return <input ref={inputRef} type="text" />;
});

const App = () => {
  const customInputRef = useRef();

  return (
    <div>
      <CustomInput ref={customInputRef} />
      <button onClick={() => customInputRef.current.focus()}>Focus the input</button>
    </div>
  );
};

export default App;
```

### 9. useLayoutEffect

**What it does**: Similar to `useEffect`, but it fires synchronously after all DOM mutations.

**Analogy**: Think of it as making sure something is done immediately after an event before anything else happens.

**Example**:
```javascript
import React, { useLayoutEffect, useRef } from 'react';

const LayoutComponent = () => {
  const divRef = useRef();

  useLayoutEffect(() => {
    divRef.current.style.backgroundColor = 'lightblue';
  }, []);

  return <div ref={divRef}>This div has a background color set using useLayoutEffect</div>;
};

export default LayoutComponent;
```

### 10. useDebugValue

**What it does**: Displays a label in React DevTools for custom hooks.

**Analogy**: Think of it as adding a name tag to help identify something when debugging.

**Example**:
```javascript
import React, { useState, useDebugValue } from 'react';

const useCustomHook = (initialValue) => {
  const [value, setValue] = useState(initialValue);
  useDebugValue(value ? 'Active' : 'Inactive');
  return [value, setValue];
};

const App = () => {
  const [active, setActive] = useCustomHook(false);

  return (
    <div>
      <p>Value is {active ? 'Active' : 'Inactive'}</p>
      <button onClick={() => setActive(!active)}>Toggle</button>
    </div>
  );
};

export default App;
```

### 11. useDeferredValue

**What it does**: Defers a value to avoid blocking the UI while rendering.

**Analogy**: Think of it as asking someone to handle a task later so you can keep working on something else right now.

**Example**:
```javascript
import React, { useState, useDeferredValue } from 'react';

const DeferredComponent = () => {
  const [input, setInput] = useState('');
  const deferredInput = useDeferredValue(input);

  return (
    <div>
      <input value={input} onChange={(e) => setInput(e.target.value)} />
      <p>Deferred input: {deferredInput}</p>
    </div>
  );
};

export default DeferredComponent;
```

### 12. useTransition

**What it does**: Helps manage UI transitions, especially in concurrent mode.

**Analogy**: Think of it as planning a smooth transition between two states to avoid abrupt changes.

**Example**:
```javascript
import React, { useState, useTransition } from 'react';

const TransitionComponent = () => {
  const [isPending, startTransition] =

 useTransition();
  const [count, setCount] = useState(0);

  const handleClick = () => {
    startTransition(() => {
      setCount(count + 1);
    });
  };

  return (
    <div>
      <button onClick={handleClick}>Increment</button>
      {isPending ? <p>Loading...</p> : <p>Count: {count}</p>}
    </div>
  );
};

export default TransitionComponent;
```

### 13. useId

**What it does**: Generates unique IDs that can be used for accessibility attributes.

**Analogy**: Think of it as getting a unique serial number for each item.

**Example**:
```javascript
import React, { useId } from 'react';

const IdComponent = () => {
  const id = useId();

  return (
    <div>
      <label htmlFor={id}>Name:</label>
      <input id={id} type="text" />
    </div>
  );
};

export default IdComponent;
```

### 14. useSyncExternalStore

**What it does**: Subscribes to an external data source and synchronizes the component state.

**Analogy**: Think of it as keeping track of changes in a shared document and updating your view when the document changes.

**Example**:
```javascript
import { useSyncExternalStore } from 'react';

const useDocumentTitleStore = () => {
  const subscribe = (callback) => {
    document.title = 'Initial Title';
    const observer = new MutationObserver(callback);
    observer.observe(document.querySelector('title'), { childList: true });
    return () => observer.disconnect();
  };

  const getSnapshot = () => document.title;

  return useSyncExternalStore(subscribe, getSnapshot);
};

const TitleComponent = () => {
  const title = useDocumentTitleStore();
  return <div>Current Document Title: {title}</div>;
};

export default TitleComponent;
```

### 15. useInsertionEffect

**What it does**: Allows performing DOM insertions synchronously before layout effects.

**Analogy**: Think of it as setting up the stage before the audience sees the final performance.

**Example**:
```javascript
import React, { useInsertionEffect, useRef } from 'react';

const InsertionComponent = () => {
  const divRef = useRef();

  useInsertionEffect(() => {
    divRef.current.style.backgroundColor = 'lightgreen';
  }, []);

  return <div ref={divRef}>This div has a background color set using useInsertionEffect</div>;
};

export default InsertionComponent;
```

### Server-Specific Hooks
### 16. useServerInsertedHTML

**What it does**: Allows for injecting HTML into the server-rendered output.

**Analogy**: Think of it as embedding extra information into a document before sending it out.

**Example**:
```javascript
// Example for illustrative purposes; usually used in server-side rendering contexts
import { useServerInsertedHTML } from 'react';

const ServerHTMLComponent = () => {
  useServerInsertedHTML(() => {
    return <meta name="description" content="Server Inserted Meta Tag" />;
  });

  return <div>Check the meta tags in the HTML source.</div>;
};

export default ServerHTMLComponent;
```

### 17. useCacheRefresh

**What it does**: Refreshes cache boundaries in React Server Components.

**Analogy**: Think of it as pressing a refresh button to get the latest version of something stored.

**Example**:
```javascript
// Example for illustrative purposes; usually used in server-side rendering contexts
import { useCacheRefresh } from 'react';

const CacheComponent = () => {
  const refreshCache = useCacheRefresh();

  return (
    <div>
      <button onClick={() => refreshCache()}>Refresh Cache</button>
    </div>
  );
};

export default CacheComponent;
```

### Custom Hooks

**What it does**: Encapsulates and reuses logic across components.

**Analogy**: Think of it as creating a reusable toolkit that you can carry to different jobs.

**Example**:
```javascript
import { useState, useEffect } from 'react';

const useFetchData = (url) => {
  const [data, setData] = useState(null);

  useEffect(() => {
    fetch(url)
      .then(response => response.json())
      .then(data => setData(data));
  }, [url]);

  return data;
};

const FetchDataComponent = () => {
  const data = useFetchData('https://jsonplaceholder.typicode.com/posts/1');

  return (
    <div>
      <h1>Data:</h1>
      {data && <pre>{JSON.stringify(data, null, 2)}</pre>}
    </div>
  );
};

export default FetchDataComponent;
```

By understanding these hooks and how they can be applied, you can create more efficient and effective React components.
